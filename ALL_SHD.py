import numpy as np
import matplotlib.pyplot as plt

plt.rcParams['pdf.fonttype'] = 42

# Import All Data
seq_names25 = ["K12D5R8", "D15N10", "E7N6DF6", "E15W10", "D13P12", "E13W12", "D7P6EW6", "D6P5EW7", "G13C12", "K15Y10",
               "E6K5FY7", "E10W15", "V13P12", "N13F12", "K13W12", "E7W18"]
seq_names50 = ["K25D10R15", "D30N20", "EN13DF12", "E30W20", "DP25", "EW25", "DP13EW12", "DP10EW15", "GC25", "K30Y20",
               "EK10FY15", "E20W30", "VP25", "NF25", "KW25", "E15W35"]
seq_names100 = ["K50D20R30", "D60N40", "EDNF25", "E60W40" ,"DP50", "EW50", "DPEW25", "DP20EW30", "GC50", "K60Y40",
                "EK20FY30", "E40W60", "VP50", "NF50", "KW50", "E30W70"]
seq_names200 = ["EDNF50", "E120W80", "K100D40R60", "D120N80", "DP100", "EW100", "DPEW50", "DP40EW60", "EK40FY60", "E80W120",
                "K120Y80", "GC100", "VP100", "NF100", "KW100", "E60W140"]
seq_names400 = ["EDNF100", "E240W160", "K200D80R120", "D240N160", "DP200", "EW200", "DPEW100", "DP80EW120", "EK80FY120",
                "E160W240", "K240Y160", "GC200", "VP200", "NF200", "KW200", "E120W280"]
# seq_names20 = ["FinalSeq"]
# seq_names358 = ["Seq358"]  # LOST DATA
# seq_names1500 = ["RandSeq1500"]
seq_names = seq_names25 + seq_names50 + seq_names100 + seq_names200 + seq_names400

std_lamb25 = [0.1000757620277757, 0.144087314935632, 0.3145735272204576, 0.4898979485566357, 0.2321665435876582,
              0.499599839871872, 0.38461140477494116, 0.4044320844969528, 0.03673557622577873, 0.25215292361184316,
              0.3644563349510632, 0.48989794855663565, 0.04702083812922098, 0.1175528447228122, 0.30857584269750216,
              0.44899888641287306]
std_lamb50 = [0.0982543377108614, 0.14408731493563198, 0.3100085204056586, 0.4898979485566356, 0.23235250000000007, 0.5,
              0.3850305190438643, 0.414443302970913, 0.036765, 0.2521529236118431, 0.35054644502726023, 0.4898979485566357,
              0.047058500000000024, 0.11764699999999999, 0.30882299999999996, 0.45825756949558394]
std_lamb100 = [0.09825433771086135, 0.14408731493563198, 0.3095231535970896, 0.4898979485566355, 0.2323525, 0.5,
               0.3900884863799333, 0.4144433029709132, 0.036765, 0.25215292361184305, 0.3505464450272603,
               0.4898979485566356, 0.0470585, 0.117647, 0.308823, 0.45825756949558394]
std_lamb200 = [0.30952315359708943, 0.4898979485566355, 0.09825433771086146, 0.14408731493563195, 0.2323525000000001, 0.5,
               0.39008848637993376, 0.4144433029709133, 0.35054644502725923, 0.48989794855663377, 0.2521529236118432,
               0.036765000000000034, 0.04705849999999998, 0.11764700000000013, 0.3088229999999999, 0.4582575694955858]
std_lamb400 = [0.30952315359708943, 0.4898979485566355, 0.09825433771086146, 0.14408731493563195, 0.2323525000000001,
               0.5, 0.39008848637993376, 0.4144433029709133, 0.35054644502725923, 0.48989794855663377, 0.2521529236118432,
               0.036765000000000034, 0.04705849999999998, 0.11764700000000013, 0.3088229999999999, 0.4582575694955858]
# std_lamb20 = [0.2323531928371332]  # UGLY DATA
# std_lamb358 = [0.19653462440969244]  # LOST DATA
# std_lamb1500 = [0.21445114955357555]  # UGLY DATA
std_lamb = std_lamb25 + std_lamb50 + std_lamb100 + std_lamb200 + std_lamb400

avg_lamb25 = [0.4211773999999999, 0.4117658000000002, 0.4094124, 0.4,
              0.5171774000000001, 0.48, 0.50447108, 0.5023533600000001,
              0.6088243999999999, 0.5882360000000002, 0.5582357200000001, 0.6,
              0.7098831600000003, 0.7011771200000001, 0.6788240799999999, 0.72]
avg_lamb50 = [0.41764800000000024, 0.41176579999999996, 0.4211771200000001, 0.4,
              0.5264715, 0.5, 0.51376518, 0.5105886000000001,
              0.6102950000000003, 0.5882359999999996, 0.5926475000000001, 0.6,
              0.7117655, 0.705883, 0.6911769999999998, 0.7]
avg_lamb100 = [0.417648, 0.4117658, 0.42647125, 0.4,
               0.5264714999999998, 0.5,0.5132357499999999, 0.5105886000000001,
               0.610295, 0.588236, 0.5926475, 0.6,
               0.7117655, 0.705883, 0.691177, 0.7]
avg_lamb200 = [0.42647124999999986, 0.4, 0.4176480000000006, 0.41176579999999946,
               0.5264714999999996, 0.5, 0.5132357499999999, 0.5105886,
               0.59264750000000034094124, 0.6, 0.5882359999999992, 0.6102950000000006,
               0.711765500000002, 0.705883, 0.6911770000000012, 0.7]
avg_lamb400 = [0.42647124999999986, 0.4, 0.4176480000000006, 0.41176579999999946,
               0.5264714999999996, 0.5, 0.5132357499999999, 0.5105886,
               0.5926475000000003, 0.6, 0.5882359999999992, 0.6102950000000006,
               0.711765500000002, 0.705883, 0.6911770000000012, 0.7]
# avg_lamb20 = [0.5450006999999999]  # UGLY DATA
# avg_lamb358 = [0.19653462440969244]  # LOST DATA
# avg_lamb1500 = [0.6236869333333371]  # UGLY DATA
avg_lamb = avg_lamb25 + avg_lamb50 + avg_lamb100 + avg_lamb200 + avg_lamb400

# Save Data Into Giant Array
Array = np.empty(shape=[80, 7], dtype=object)  # Seq, N, mean_lambda, std_lambda, mean_SHD, std_SHD
for count, name in enumerate(seq_names):
    SHD = np.loadtxt(f'ALL_SHD_Data/{name}', dtype=object, delimiter=',')
    SHD[:, 1] = SHD[:, 1].astype(float)
    Array[count, 0] = SHD[0, 0]
    Array[count, 1] = len(list(SHD[0, 0]))
    Array[count, 2] = avg_lamb[count]
    Array[count, 3] = std_lamb[count]
    Array[count, 4] = np.mean(SHD[:, 1])
    Array[count, 5] = np.std(SHD[:, 1])
    Array[count, 6] = round(avg_lamb[count], 1)

np.savetxt(f'/Users/ali/Montecarlo/Montecarlo/80PointsArray', Array, fmt='%s', delimiter=',')

x25 = [0.1000757620277757, 0.144087314935632, 0.3145735272204576, 0.4898979485566357, 0.2321665435876582, 0.499599839871872,
       0.38461140477494116, 0.4044320844969528, 0.03673557622577873, 0.25215292361184316, 0.3644563349510632, 0.48989794855663565,
       0.04702083812922098, 0.1175528447228122, 0.30857584269750216, 0.44899888641287306]

x50 = [0.3100085204056586, 0.4898979485566356, 0.0982543377108614, 0.14408731493563198, 0.2323525, 0.5,
       0.3850305190438643, 0.4144433029709132, 0.036765, 0.25215292361184305, 0.3505464450272603, 0.4898979485566356,
       0.0470585, 0.117647, 0.308823, 0.45825756949558394]
x100 = [0.09825433771086135, 0.14408731493563198, 0.3095231535970896, 0.4898979485566355, 0.036765, 0.25215292361184305,
        0.3505464450272603, 0.4898979485566356, 0.0470585, 0.117647, 0.308823, 0.45825756949558394, 0.2323525,
        0.5, 0.3900884863799333, 0.4144433029709132]
x200 = [0.30952315359708943, 0.4898979485566355, 0.09825433771086146, 0.14408731493563195, 0.2323525000000001, 0.5,
        0.39008848637993376, 0.4144433029709133, 0.35054644502725923, 0.48989794855663377, 0.2521529236118432,
        0.036765000000000034, 0.04705849999999998, 0.11764700000000013, 0.3088229999999999, 0.4582575694955858]
x400 = [0.30952315359708943, 0.4898979485566355, 0.09825433771086146, 0.14408731493563195, 0.2323525000000001, 0.5,
        0.39008848637993376, 0.4144433029709133, 0.35054644502725923, 0.48989794855663377, 0.2521529236118432,
        0.036765000000000034, 0.04705849999999998, 0.11764700000000013, 0.3088229999999999, 0.4582575694955858]

y25 = [0.014215642485740514, 0.020467741881056104, 0.04465746431339391, 0.06959585869213092, 0.03295087714388588,
       0.07093488305096825, 0.0546049071994313, 0.057400673343151555, 0.005209982010332643, 0.03579132690364176,
       0.051703584788189434, 0.06958955496694051, 0.0066794254409415525, 0.01668129785630122, 0.043739746234823476,
       0.06366758282719864]
y50 = [0.03338141755220076, 0.052834105057867294, 0.01060302155629789, 0.015539818113474378, 0.02504941063497667,
       0.05390375775988333, 0.04150075620788769, 0.04466881858369001, 0.003964006618840805, 0.02720121737991417,
       0.03778070323776025, 0.05293077890775153, 0.005071529418470352, 0.012685239733371418, 0.0332977415150326,
       0.04937528582782152]
y100 = [0.007812529161112207, 0.011455131094589068, 0.024632315562646598, 0.03893953569838331, 0.002924910724996138,
        0.02006859967453406, 0.02788725872016962, 0.03896027000633733, 0.003742490250608582, 0.009359853319411627,
        0.02455033163481499, 0.03647545902563967, 0.01846842, 0.03973487, 0.03102876, 0.03297556]
y200 = [0.01782614785158689, 0.028240211806902917, 0.005664199355855132, 0.008306838488439175, 0.013398363897001872,
        0.028848544659419523, 0.02245679522248693, 0.023905874592339182, 0.020213111930585344, 0.02826080456818241,
        0.014539505940234532, 0.0021181619944832682, 0.0027128252413215737, 0.006780415774148191, 0.017787828078378393,
        0.02643403589186135]
y400 = [0.012812047573892552, 0.020250802734931177, 0.004063335909996124, 0.005960010394217143, 0.00959986940459736,
        0.02068845296801356, 0.016118416612695675, 0.017148576658811674, 0.014485162955552603, 0.02027433955653725,
        0.010425581759676828, 0.0015232052933624226, 0.0019456285342820858, 0.004864495363830773, 0.012781942311888537,
        0.018955943267218448]

def n25(x):
    y = 0.14195521272202327*x
    return y

def n50(x):
    y = 0.108*x
    return y

def n100(x):
    y = 0.08*x
    return y

def n200(x):
    y = 0.05763498*x
    return y

def n400(x):
    y = 0.04137832569421384*x
    return y

def stdSHD(std_lamb, length):
    stdSHD = (0.65 * (length ** (-0.45922))) * std_lamb
    return stdSHD

def RMSD(x1, y1, n):
    for ind in x1:
        y_trendline = []
        if n == 50:
            y_trendline.append(n50(ind))
        elif n == 25:
            y_trendline.append(n25(ind))
        elif n == 100:
            y_trendline.append(n100(ind))
        elif n == 200:
            y_trendline.append(n200(ind))
    rm = 0
    for solved_dep, trendline_dep in zip(y1, y_trendline):
        rm += np.sqrt(((solved_dep-trendline_dep)**2)/4)
    rnd_rm = round(rm, 5)
    return rnd_rm

RMSD25 = RMSD(x25, y25, int(25))
RMSD50 = RMSD(x50, y50, int(50))
RMSD100 = RMSD(x100, y100, int(100))
RMSD200 = RMSD(x200, y200, int(200))
RMSD400 = RMSD(x400, y400, int(400))

# trendline N = 25
a = 0
b = 0.14195521272202327
xseq = np.linspace(0, 0.5, 1000)
plt.plot(xseq, a + b*xseq, '--g', label=f"N = 25: RMSD {RMSD25}")
plt.legend()

# trendline N = 50
xseq = np.linspace(0, 0.5, 1000)
a = 0
b = 0.108
plt.plot(xseq, stdSHD(xseq, 50), '--b', label=f"N = 50: RMSD {RMSD50}")
plt.legend()

# trendline N = 100
xseq = np.linspace(0, 0.5, 1000)
a = 0
b = 0.08
plt.plot(xseq, a + b*xseq, '--r', label=f"N = 100: RMSD {RMSD100}")

# trendline N = 200
xseq = np.linspace(0, 0.5, 1000)
a = 0
b = 0.05763498
plt.plot(xseq, a + b*xseq, '--k', label=f"N = 200: RMSD {RMSD200}")
plt.legend()

# trendline N = 400
xseq = np.linspace(0, 0.5, 1000)
a = 0
b = 0.04137832569421384
plt.plot(xseq, a + b*xseq, '--k', label=f"N = 200: RMSD {RMSD200}")
plt.legend()

# <editor-fold desc="std(lambda) vs std(SHD)">
# Length 50
# std(lamb) = 0.4
plt.scatter(0.1000757620277757, 0.014215642485740514, label='K12D5R8', color='y')
plt.scatter(0.144087314935632, 0.020467741881056104, label='D15N10', color='y')
plt.scatter(0.3145735272204576, 0.04465746431339391, label='E7N6DF6', color='y')
plt.scatter(0.4898979485566357, 0.06959585869213092, label='E15W10', color='y')

# std(lamb) = 0.5
plt.scatter(0.2321665435876582, 0.03295087714388588, label='D13P12', color='lawngreen')
plt.scatter(0.499599839871872, 0.07093488305096825, label='E13W12', color='lawngreen')
plt.scatter(0.38461140477494116, 0.0546049071994313, label='D7P6EW6', color='lawngreen')
plt.scatter(0.4044320844969528, 0.057400673343151555, label='D6P5EW7', color='lawngreen')

# std(lamb) = 0.6
plt.scatter(0.03673557622577873, 0.005209982010332643, label='G13C12', color='r')
plt.scatter(0.25215292361184316, 0.03579132690364176, label='K15Y10', color='r')
plt.scatter(0.3644563349510632, 0.051703584788189434, label='E6K5FY7', color='r')
plt.scatter(0.48989794855663565, 0.06958955496694051, label='E10W15', color='r')

# std(lamb) = 0.7
plt.scatter(0.04702083812922098, 0.0066794254409415525, label='V13P12', color='b')
plt.scatter(0.1175528447228122, 0.01668129785630122, label='N13F12', color='b')
plt.scatter(0.30857584269750216, 0.043739746234823476, label='K13W12', color='b')
plt.scatter(0.44899888641287306, 0.06366758282719864, label='E7W18', color='b')

# Length 50
# std(lamb) = 0.4
plt.scatter(0.3100085204056586, 0.03338141755220076, label='EN13DF12', color='y')
plt.scatter(0.4898979485566356, 0.052834105057867294, label='E30W20', color='y')
plt.scatter(0.0982543377108614, 0.01060302155629789, label='K25D10R15', color='y')
plt.scatter(0.14408731493563198, 0.015539818113474378, label='D30N20', color='y')

# std(lamb) = 0.5
plt.scatter(0.2323525, 0.02504941063497667, label='DP25', color='lawngreen')
plt.scatter(0.5, 0.05390375775988333, label='EW25', color='lawngreen')
plt.scatter(0.3850305190438643, 0.04150075620788769, label='DP13EW12', color='lawngreen')
plt.scatter(0.4144433029709132, 0.04466881858369001, label='DP10EW15', color='lawngreen')

# std(lamb) = 0.6
plt.scatter(0.036765, 0.003964006618840805, label='GC25', color='r')
plt.scatter(0.25215292361184305, 0.02720121737991417, label='K30Y20', color='r')
plt.scatter(0.3505464450272603, 0.03778070323776025, label='EK10FY15', color='r')
plt.scatter(0.4898979485566356, 0.05293077890775153, label='E20W30', color='r')

# std(lamb) = 0.7
plt.scatter(0.0470585, 0.005071529418470352, label='VP25', color='b')
plt.scatter(0.117647, 0.012685239733371418, label='NF25', color='b')
plt.scatter(0.308823, 0.0332977415150326, label='KW25', color='b')
plt.scatter(0.45825756949558394, 0.04937528582782152, label='E15W35', color='b')

# Length 100
# std(lamb) = 0.4
plt.scatter(0.09825433771086135, 0.007812529161112207, label='K50D20R30', color='y')
plt.scatter(0.14408731493563198, 0.011455131094589068, label='D60N40', color='y')
plt.scatter(0.3095231535970896, 0.024632315562646598, label='EDNF25', color='y')
plt.scatter(0.4898979485566355, 0.03893953569838331, label='E60W40', color='y')

# std(lamb) = 0.5
plt.scatter(0.2323525, 0.01846842, label='DP50', color='lawngreen')
plt.scatter(0.5, 0.03973487, label='EW50', color='lawngreen')
plt.scatter(0.3900884863799333, 0.03102876, label='DPEW25', color='lawngreen')
plt.scatter(0.4144433029709132, 0.03297556, label='DP20EW30', color='lawngreen')

# std(lamb) = 0.6
plt.scatter(0.036765, 0.002924910724996138, label='GC50', color='r')
plt.scatter(0.25215292361184305, 0.02006859967453406, label='K60Y40', color='r')
plt.scatter(0.3505464450272603, 0.02788725872016962, label='EK20FY30', color='r')
plt.scatter(0.4898979485566356, 0.03896027000633733, label='E40W60', color='r')

# std(lamb) = 0.7
plt.scatter(0.0470585, 0.003742490250608582, label='VP50', color='b')
plt.scatter(0.117647, 0.009359853319411627, label='NF50', color='b')
plt.scatter(0.308823, 0.02455033163481499, label='KW50', color='b')
plt.scatter(0.45825756949558394, 0.03647545902563967, label='E30W70', color='b')

# Length 100
# std(lamb) = 0.4
plt.scatter(0.09825433771086135, 0.007812529161112207, label='K50D20R30', color='y')
plt.scatter(0.14408731493563198, 0.011455131094589068, label='D60N40', color='y')
plt.scatter(0.3095231535970896, 0.024632315562646598, label='EDNF25', color='y')
plt.scatter(0.4898979485566355, 0.03893953569838331, label='E60W40', color='y')

# std(lamb) = 0.5
plt.scatter(0.2323525, 0.01846842, label='DP50', color='lawngreen')
plt.scatter(0.5, 0.03973487, label='EW50', color='lawngreen')
plt.scatter(0.3900884863799333, 0.03102876, label='DPEW25', color='lawngreen')
plt.scatter(0.4144433029709132, 0.03297556, label='DP20EW30', color='lawngreen')

# std(lamb) = 0.6
plt.scatter(0.036765, 0.002924910724996138, label='GC50', color='r')
plt.scatter(0.25215292361184305, 0.02006859967453406, label='K60Y40', color='r')
plt.scatter(0.3505464450272603, 0.02788725872016962, label='EK20FY30', color='r')
plt.scatter(0.4898979485566356, 0.03896027000633733, label='E40W60', color='r')

# std(lamb) = 0.7
plt.scatter(0.0470585, 0.003742490250608582, label='VP50', color='b')
plt.scatter(0.117647, 0.009359853319411627, label='NF50', color='b')
plt.scatter(0.308823, 0.02455033163481499, label='KW50', color='b')
plt.scatter(0.45825756949558394, 0.03647545902563967, label='E30W70', color='b')


# Length 200
# std(lamb) = 0.4
plt.scatter(0.30952315359708943, 0.01782614785158689,label='EDNF50', color='y')
plt.scatter(0.4898979485566355, 0.028240211806902917,label='E120W80', color='y')
plt.scatter(0.09825433771086146, 0.005664199355855132,label='K100D40R60', color='y')
plt.scatter(0.14408731493563195, 0.008306838488439175,label='D120N80', color='y')

# std(lamb) = 0.5
plt.scatter(0.2323525000000001, 0.013398363897001872,label='DP100', color='lawngreen')
plt.scatter(0.5, 0.028848544659419523,label='EW100', color='lawngreen')
plt.scatter(0.39008848637993376, 0.02245679522248693,label='DPEW50', color='lawngreen')
plt.scatter(0.4144433029709133, 0.023905874592339182,label='DP40EW60', color='lawngreen')

# std(lamb) = 0.6
plt.scatter(0.35054644502725923, 0.020213111930585344,label='EK40FY60', color='r')
plt.scatter(0.48989794855663377, 0.02826080456818241,label='E80W120', color='r')
plt.scatter(0.2521529236118432, 0.014539505940234532,label='K120Y80', color='r')
plt.scatter(0.036765000000000034, 0.0021181619944832682,label='GC100', color='r')

# std(lamb) = 0.7
plt.scatter(0.04705849999999998, 0.0027128252413215737,label='VP100', color='b')
plt.scatter(0.11764700000000013, 0.006780415774148191,label='NF100', color='b')
plt.scatter(0.3088229999999999, 0.017787828078378393,label='KW100', color='b')
plt.scatter(0.4582575694955858, 0.02643403589186135,label='E60W140', color='b')

# Length 400
# std(lamb) = 0.4
plt.scatter(0.30952315359708943, 0.012812047573892552,label='EDNF100', color='y')
plt.scatter(0.4898979485566355, 0.020250802734931177,label='E240W160', color='y')
plt.scatter(0.09825433771086146, 0.004063335909996124,label='K200D80R120', color='y')
plt.scatter(0.14408731493563195, 0.005960010394217143,label='D240N160', color='y')

# std(lamb) = 0.5
plt.scatter(0.2323525000000001, 0.013398363897001872,label='DP200', color='lawngreen')
plt.scatter(0.5, 0.028848544659419523,label='EW200', color='lawngreen')
plt.scatter(0.39008848637993376, 0.016118416612695675,label='DPEW100', color='lawngreen')
plt.scatter(0.4144433029709133, 0.017148576658811674,label='DP80EW120', color='lawngreen')

# std(lamb) = 0.6
plt.scatter(0.35054644502725923, 0.014485162955552603,label='EK80FY120', color='r')
plt.scatter(0.48989794855663377, 0.02027433955653725,label='E160W240', color='r')
plt.scatter(0.2521529236118432, 0.010425581759676828,label='K240Y160', color='r')
plt.scatter(0.036765000000000034, 0.0015232052933624226,label='GC200', color='r')

# std(lamb) = 0.7
plt.scatter(0.04705849999999998, 0.0019456285342820858,label='VP200', color='b')
plt.scatter(0.11764700000000013, 0.004864495363830773,label='NF200', color='b')
plt.scatter(0.3088229999999999, 0.012781942311888537,label='KW200', color='b')
plt.scatter(0.4582575694955858, 0.018955943267218448,label='E120W280', color='b')

# plt.legend()
plt.xlabel('Standard Deviation of Lambda')
plt.ylabel('Standard Deviation of SHD')
plt.title('Mean Hydrophobicity: [0.4, 0.7]')
plt.savefig('Fig4_stdSHD.pdf')
plt.show()
# </editor-fold>


# <editor-fold desc="mean(lambda) vs std(SHD)">


# </editor-fold>

